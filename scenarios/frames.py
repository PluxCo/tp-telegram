import logging

from core.feedbacks import UserFeedback, ButtonUserFeedback, MessageUserFeedback, ReplyUserFeedback
from scenarios.builders import UserBuilder
from scenarios.scr import BaseFrame, ScenarioContext
from telegram.messages import MessageWithButtons, SimpleMessage
from tools import Settings

logger = logging.getLogger(__name__)


class ConfirmStartFrame(BaseFrame):
    def exec(self):
        message = MessageWithButtons(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ 3DiVi! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã "
                                          "–ø–æ–º–æ—á—å –≤–∞–º –æ—Ü–µ–Ω–∏—Ç—å –∏ —Ä–∞–∑–≤–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏. "
                                          "–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, –ø–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Å—Ç–∞–Ω—å—Ç–µ –µ—â–µ –±–æ–ª–µ–µ "
                                          "–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ù–∞—á–Ω–µ–º?\n(‚úø‚ó†‚Äø‚ó†) ",
                                     user=self.context.user, buttons=["–ü–æ–µ—Ö–∞–ª–∏!"])

        self.context.manager.link_frame(message, self)

    def handle(self, feedback: UserFeedback):
        if not isinstance(feedback, ButtonUserFeedback):
            return

        local_next = StartCreationFrame(self.context)

        self.context.change_state(local_next)


class StartCreationFrame(BaseFrame):
    def exec(self):
        message = SimpleMessage(text="–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º", user=self.context.user)

        self.context.manager.link_frame(message, self)
        self.context.change_state()


class PinConfirmationFrame(BaseFrame):
    def exec(self):
        message = SimpleMessage(text="–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å.",
                                user=self.context.user)

        self.context.manager.link_frame(message, self)

    def handle(self, feedback: UserFeedback):
        if not isinstance(feedback, (MessageUserFeedback, ReplyUserFeedback)):
            return

        if feedback.text != Settings()["password"]:
            local_next = BadPasswordFrame(self.context, self)
            self.context.change_state(local_next)
        else:
            local_next = GoodPasswordFrame(self.context)
            self.context.change_state(local_next)


class BadPasswordFrame(BaseFrame):

    def __init__(self, context: ScenarioContext, master: PinConfirmationFrame):
        super().__init__(context)

        self.__master = master

    def exec(self):
        message = SimpleMessage(text="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (‡∏á Õ†‚ñß. Õ°‚ñß)‡∏á",
                                user=self.context.user)

        self.context.manager.link_frame(message, self.__master)  # Maybe not needed
        self.context.change_state(self.__master, execute=False)


class GoodPasswordFrame(BaseFrame):
    def exec(self):
        message = SimpleMessage(text="–û—Ç–ª–∏—á–Ω–æ, –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å („Å£‚óî‚ó°‚óî)„Å£‚ù§",
                                user=self.context.user)

        self.context.manager.link_frame(message, self)
        self.context.change_state()


class UserCreationFrame(BaseFrame):

    def __init__(self, context: ScenarioContext):
        super().__init__(context)

        self.__builder = UserBuilder(context.user.id)

    def exec(self):
        message = SimpleMessage(text="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                                user=self.context.user)

        self.context.manager.link_frame(message, self)

    def handle(self, feedback: UserFeedback):
        if not isinstance(feedback, (MessageUserFeedback, ReplyUserFeedback)):
            return

        self.__builder.set_name(feedback.text)

        next_hop = GroupSelectionFrame(self.context, self.__builder)
        self.context.change_state(next_hop)


class GroupSelectionFrame(BaseFrame):
    def __init__(self, context: ScenarioContext, builder: UserBuilder):
        super().__init__(context)

        self.__builder = builder

    def exec(self):
        message = SimpleMessage(text="–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–Ω–∏ –≥—Ä—É–ø–ø, –∫ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è",
                                user=self.context.user)

        self.context.manager.link_frame(message, self)

        self.context.change_state(GroupRowFrame(self.context, self.__builder))

    def handle(self, feedback: UserFeedback):
        pass


class GroupRowFrame(BaseFrame):
    def __init__(self, context: ScenarioContext, builder: UserBuilder):
        super().__init__(context)

        self.__builder = builder

        self.__groups = self.__builder.available_groups()
        self.__group_step = 0

    def exec(self):
        if self.__group_step >= len(self.__groups):
            self.context.change_state(UserCreationEndFrame(self.context, self.__builder))

            return

        message = MessageWithButtons(text=self.__groups[self.__group_step][1],
                                     user=self.context.user, buttons=["–ù–µ –æ—Ç–Ω–æ—à—É—Å—å", "1", "2", "3", "4", "5"])
        # Be accurate with buttons indices, bc levels selects by that.

        self.context.manager.link_frame(message, self)

    def handle(self, feedback: UserFeedback):
        if not isinstance(feedback, ButtonUserFeedback):
            return

        if feedback.button_id != 0:
            cur_group = self.__groups[self.__group_step]

            self.__builder.add_group(cur_group[0], feedback.button_id)

        self.__group_step += 1
        self.context.change_state(self)


class UserCreationEndFrame(BaseFrame):
    def __init__(self, context: ScenarioContext, builder: UserBuilder):
        super().__init__(context)

        self.__builder = builder

    def exec(self):
        self.__builder.create_user()

        message = SimpleMessage(text="–†–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. "
                                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ",
                                user=self.context.user)

        self.context.manager.link_frame(message, self)
        self.context.change_state()
